# --- Base de datos simulada ---
usuarios_registrados = {
    "ana": {"contrase√±a": "1234", "rol": "editor"},
    "admin": {"contrase√±a": "admin123", "rol": "admin"},
    "invitado": {"contrase√±a": "guest", "rol": "invitado"}
}

permisos_por_rol = {
    "admin": ["editar", "leer", "eliminar"],
    "editor": ["editar", "leer"],
    "invitado": ["leer"]
}

ips_permitidas = ["192.168.1.50", "192.168.1.100", "10.0.0.1"]
sistema_activado = True  # Sistema siempre activo (podr√≠a ser din√°mico)

# --- Funci√≥n principal ---
def sistema_autenticacion():
    intentos = 0
    max_intentos = 3

    while intentos < max_intentos:
        # 1. Ingreso de usuario y contrase√±a
        usuario = input("Ingrese su usuario: ").strip()
        contrase√±a = input("Ingrese su contrase√±a (visible en pantalla): ").strip()  # Usamos input normal

        # 2. Verificar credenciales
        if usuario in usuarios_registrados and usuarios_registrados[usuario]["contrase√±a"] == contrase√±a:
            print("\n‚úÖ ¬°Autenticaci√≥n exitosa!")
            datos_usuario = usuarios_registrados[usuario]
            rol = datos_usuario["rol"]
            permisos = permisos_por_rol[rol]
            
            # 3. Verificar rol
            print(f"\nüë§ Rol: {rol}")
            if rol == "admin":
                print("  ‚úÖ Permisos: Todos (editar, leer, eliminar)")
            elif rol == "editor":
                print("  ‚úÖ Permisos: editar, leer")
            else:
                print("  ‚úÖ Permisos: solo lectura")
            
            # 4. Ingreso de IP
            ip_usuario = input("\nIngrese su IP: ").strip()
            if ip_usuario in ips_permitidas:
                print(f"  üåê IP {ip_usuario} permitida.")
            else:
                print(f"  üö´ IP {ip_usuario} bloqueada. Contacte al administrador.")
                return  # Termina si la IP no es v√°lida
            
            # 5. Selecci√≥n de acci√≥n
            print("\nAcciones disponibles:")
            print("  1. Editar documento")
            print("  2. Eliminar usuario")
            print("  3. Ver informe")
            opcion = input("Seleccione una acci√≥n (1/2/3): ").strip()
            
            # Mapear opci√≥n a acci√≥n
            accion = ""
            if opcion == "1":
                accion = "editar_documento"
            elif opcion == "2":
                accion = "eliminar_usuario"
            elif opcion == "3":
                accion = "ver_informe"
            else:
                print("‚ùå Opci√≥n inv√°lida.")
                return
            
            # 6. Coincidencia de patrones (match-case)
            print("\nResultado:")
            match accion:
                case "editar_documento" if "editar" in permisos:
                    print("  üìù Acci√≥n: editar documento permitida.")
                case "eliminar_usuario" if rol == "admin":
                    print("  üóëÔ∏è Acci√≥n: eliminar usuario permitida.")
                case "ver_informe" if "leer" in permisos:
                    print("  üìä Acci√≥n: ver informe permitida.")
                case _:
                    print("  ‚ùå Acci√≥n no autorizada.")
            
            # 7. Verificar estado del sistema
            if not sistema_activado:
                print("  ‚ö†Ô∏è Sistema en mantenimiento.")
            else:
                print("  üöÄ Sistema operativo.")
            
            return  # Salir tras autenticaci√≥n exitosa
        
        else:
            intentos += 1
            print(f"\n‚ùå Error: Credenciales incorrectas (intentos restantes: {max_intentos - intentos}).\n")
    
    print("‚ùó M√°ximo de intentos excedido. Bloqueando acceso...")

# --- Ejecutar el sistema ---
if __name__ == "__main__":
    sistema_autenticacion()